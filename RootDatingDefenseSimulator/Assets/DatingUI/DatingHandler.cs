using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// This class will keep the datable characters.
/// </summary>
public class DatingHandler : MonoBehaviour
{
    [SerializeField] private HorizontalLayoutGroup availableTreeList;
    [SerializeField] private GameObject datingView;

    [SerializeField] private TreeProfilePicture treePrefab;
    [SerializeField] private Sprite[] debugRandomizeFaces;
    [SerializeField] private Color[] debugRandomizeColors;

    [SerializeField] private TreeProfilePicture[] profilePictures;
    [SerializeField] private TreeProfilePicture[] selectedProfiles;
    [SerializeField] private GameObject datePrompt;

    private TreeDateStatblock[] trees;

    /// <summary>
    /// Debug purposes. Later characters will be shared.
    /// </summary>
    private void Awake()
    {
        Initialize(8);
    }

    /// <summary>
    /// Debug class, later we'll read the profiles from a list of Characters 
    /// which will be shared between TD and DS.
    /// </summary>
    /// <param name="numCharacters"></param>
    public void Initialize(int numCharacters)
    {
        trees = new TreeDateStatblock[numCharacters];
        for (int i = 0; i < numCharacters; i++)
        {
            trees[i] = new TreeDateStatblock();
            trees[i].face = debugRandomizeFaces[Random.Range(0, debugRandomizeFaces.Length)];
            trees[i].backgroundCol = debugRandomizeColors[Random.Range(0, debugRandomizeColors.Length)];
        }
        //Randomize initial list of trees. Later they'll be generated by dating.
        for(int i = 0; i < numCharacters; i++)
        {
            DisplayTreeProfile(trees[i], profilePictures[i]);
            profilePictures[i].index = i;

            //Apparently i is a pointer, so let's exorcise that little guy.
            int integerPointerExorcist = i;
            profilePictures[i].selectTreeButton.onClick.AddListener(delegate { SelectTree(integerPointerExorcist); });
        }

        for (int i = 0; i < selectedProfiles.Length; i++)
        {
            selectedProfiles[i].gameObject.SetActive(false);
        }

        datePrompt.SetActive(false);
    }

    /// <summary>
    /// When clicking a tree they can be either selected or deselected.
    /// Selected trees are available for dating.
    /// </summary>
    /// <param name="tree"></param>
    public void SelectTree(int treeIndex)
    {
        Debug.Log("hfeiuhgiren");
        TreeProfilePicture tree = profilePictures[treeIndex];

        //If tree already is selected, deselect
        for(int i = 0; i < selectedProfiles.Length; i++)
        {
            if (!selectedProfiles[i].gameObject.activeInHierarchy)
                continue;
            if (selectedProfiles[i].index != treeIndex)
                continue;

            selectedProfiles[i].gameObject.SetActive(false);
            profilePictures[treeIndex].Highlight(false);
            ShouldShowDatePrompt();
            return;
        }

        //Add tree to selected
        for (int i = 0; i < selectedProfiles.Length; i++)
        {
            if (selectedProfiles[i].gameObject.activeInHierarchy)
                continue;

            DisplayTreeProfile(trees[i], selectedProfiles[i]);
            selectedProfiles[i].gameObject.SetActive(true);
            selectedProfiles[i].index = treeIndex;
            profilePictures[treeIndex].Highlight(true);

            break;
        }

        ShouldShowDatePrompt();
    }

    private void DisplayTreeProfile(TreeDateStatblock tree, TreeProfilePicture profilePic)
    {
        profilePic.faceImage.sprite = tree.face;
        profilePic.background.color = tree.backgroundCol;
    }

    private void ShouldShowDatePrompt()
    {

        for (int i = 0; i < selectedProfiles.Length; i++)
        {
            if (!selectedProfiles[i].gameObject.activeInHierarchy)
            {
                datePrompt.SetActive(false);
                return;
            }
        }
        datePrompt.SetActive(true);
    }

    public TreeDateStatblock DateQuoteOnQuote(TreeDateStatblock tree1, TreeDateStatblock tree2)
    {
        TreeDateStatblock treeYoungling = new TreeDateStatblock();
        if (Random.value < 0.5f)
            treeYoungling.face = tree1.face;
        else
            treeYoungling.face = tree2.face;

        if (Random.value < 0.5f)
            treeYoungling.backgroundCol = tree1.backgroundCol;
        else
            treeYoungling.backgroundCol = tree2.backgroundCol;

        return treeYoungling;
    }
}
