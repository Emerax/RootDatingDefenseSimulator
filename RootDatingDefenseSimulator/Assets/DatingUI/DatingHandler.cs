using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// This class will keep the datable characters.
/// </summary>
public class DatingHandler : MonoBehaviour {
    [SerializeField] private HorizontalLayoutGroup availableTreeList;
    [SerializeField] private GameObject datingView;

    [SerializeField] private TreeStatsSettings profileSettings;
    [SerializeField] private TreeProfilePicture treePrefab;
    [SerializeField] private Sprite[] debugRandomizeFaces;
    [SerializeField] private Color[] debugRandomizeColors;
    [SerializeField] private Sprite[] debugRandomizePatterns;
    [SerializeField] private Sprite[] debugRandomizeTrunks;

    [SerializeField] private TreeProfilePicture[] profilePictures;
    [SerializeField] private TreeProfilePicture[] selectedProfiles;
    [SerializeField] private GameObject datePrompt;

    public static TreeStatsSettings ProfileSettings { get; private set; }

    private TreeStatblock[] trees;

    /// <summary>
    /// Debug purposes. Later characters will be shared.
    /// </summary>
    private void Awake() {
        ProfileSettings = profileSettings;
        Initialize(8);
    }

    /// <summary>
    /// Debug class, later we'll read the profiles from a list of Characters 
    /// which will be shared between TD and DS.
    /// </summary>
    /// <param name="numCharacters"></param>
    public void Initialize(int numCharacters) {
        trees = new TreeStatblock[numCharacters];
        for(int i = 0; i < numCharacters; i++) {
            trees[i] = GenerateRandomTreeStats();
        }
        //Randomize initial list of trees. Later they'll be generated by dating.
        for(int i = 0; i < numCharacters; i++) {
            DisplayTreeProfile(trees[i], profilePictures[i]);
            profilePictures[i].index = i;

            //Apparently i is a pointer, so let's exorcise that little guy.
            int integerPointerExorcist = i;
            profilePictures[i].selectTreeButton.onClick.AddListener(delegate {
                SelectTree(integerPointerExorcist);
            });
        }

        for(int i = 0; i < selectedProfiles.Length; i++) {
            selectedProfiles[i].gameObject.SetActive(false);
        }

        datePrompt.SetActive(false);
    }

    /// <summary>
    /// When clicking a tree they can be either selected or deselected.
    /// Selected trees are available for dating.
    /// </summary>
    /// <param name="tree"></param>
    public void SelectTree(int treeIndex) {
        //If tree already is selected, deselect
        for(int i = 0; i < selectedProfiles.Length; i++) {
            if(!selectedProfiles[i].gameObject.activeInHierarchy)
                continue;
            if(selectedProfiles[i].index != treeIndex)
                continue;

            selectedProfiles[i].gameObject.SetActive(false);
            profilePictures[treeIndex].Highlight(false);
            ShouldShowDatePrompt();
            return;
        }

        //Add tree to selected
        for(int i = 0; i < selectedProfiles.Length; i++) {
            if(selectedProfiles[i].gameObject.activeInHierarchy)
                continue;

            DisplayTreeProfile(trees[treeIndex], selectedProfiles[i]);
            selectedProfiles[i].gameObject.SetActive(true);
            selectedProfiles[i].index = treeIndex;
            profilePictures[treeIndex].Highlight(true);

            break;
        }

        ShouldShowDatePrompt();
    }

    public static TreeStatblock GenerateRandomTreeStats() {
        return new TreeStatblock(new List<int>() {
                    Random.Range(0, ProfileSettings.FaceSprites.Count),
                    Random.Range(0, ProfileSettings.TrunkSprites.Count),
                    Random.Range(0, ProfileSettings.Colors.Count),
                    Random.Range(0, ProfileSettings.Colors.Count),
                    Random.Range(0, ProfileSettings.PatternSprites.Count),
                    Random.Range(0, ProfileSettings.AttackTiers.Count),
                    Random.Range(0, ProfileSettings.CooldownTiers.Count),
                    Random.Range(0, ProfileSettings.RangeTiers.Count),
                    Random.Range(0, ProfileSettings.SizeTiers.Count),
                    Random.Range(0, ProfileSettings.Abilities.Count),
                });
    }

    private void DisplayTreeProfile(TreeStatblock tree, TreeProfilePicture profilePic) {
        profilePic.SetProfile(tree);
    }

    private void ShouldShowDatePrompt() {

        for(int i = 0; i < selectedProfiles.Length; i++) {
            if(!selectedProfiles[i].gameObject.activeInHierarchy) {
                datePrompt.SetActive(false);
                return;
            }
        }
        datePrompt.SetActive(true);
    }

    public TreeStatblock DateQuoteOnQuote(TreeStatblock tree1, TreeStatblock tree2) {
        List<int> younglingStatsIndices = tree1.StatIndexes
            .Select((i, index) => {
                if(Random.value < 0.5f) {
                    return tree1.StatIndexes[index];
                }

                return tree2.StatIndexes[index];

            })
            .ToList();

        return new TreeStatblock(younglingStatsIndices);
    }
}
